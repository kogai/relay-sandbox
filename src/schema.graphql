type Node {
  name: String
  description: String
  isPublic: Boolean
}

type Gist {
  nodes: [Node]
}

type User {
  name: String!
  login: String!
  gists(last: Int!): Gist
}

input ReactionInput {
  subjectId: String
  content: Reactions
}

type Reaction {
  content: String
}

type Subject {
  id: String
}

type ReactionOutput {
  reaction: Reaction
  subject: Subject
}

enum Reactions {
  HOORAY
}

type Mutation {
  addReaction(input: ReactionInput): ReactionOutput 
  # addTodo(input: AddTodoInput!): AddTodoPayload
  # changeTodoStatus(input: ChangeTodoStatusInput!): ChangeTodoStatusPayload
  # markAllTodos(input: MarkAllTodosInput!): MarkAllTodosPayload
  # removeCompletedTodos(input: RemoveCompletedTodosInput!): RemoveCompletedTodosPayload
  # removeTodo(input: RemoveTodoInput!): RemoveTodoPayload
  # renameTodo(input: RenameTodoInput!): RenameTodoPayload
}

type Query {
  viewer: User
}
